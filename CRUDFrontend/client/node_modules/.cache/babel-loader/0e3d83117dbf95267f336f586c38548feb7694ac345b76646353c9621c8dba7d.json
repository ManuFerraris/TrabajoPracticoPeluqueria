{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pferr\\\\TrabajoPracticoPeluqueria\\\\CRUDFrontend\\\\client\\\\src\\\\auth\\\\AuthProvider.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useContext, createContext, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useCallback } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = 'http://localhost:3000';\n\n// Datos que se van a almaecenar mientras el usuario este autenticado, se almacenaran en el localStorage\n\n// Contexto de autenticación\n// Este contexto se va a encargar de almacenar los datos del usuario y los tokens de acceso y refresco\n\n// Creamos el contexto de autenticación\n// Estos datos son solo iniciales, se van a sobreescribir cuando el usuario inicie sesión (en el Provider)\nconst AuthContext = /*#__PURE__*/createContext({\n  isAuthenticated: false,\n  user: null,\n  accessToken: null,\n  refreshToken: null,\n  isLoading: true,\n  login: () => {},\n  logout: () => {},\n  refreshAuth: async () => false,\n  setUser: () => {}\n});\n// Mantiene el estado de autenticación y proporciona funciones para iniciar/cerrar sesión y refrescar el token\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n  const [accessToken, setAccessToken] = useState(null);\n  const [refreshToken, setRefreshToken] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Función para refrescar el token de acceso\n  const refreshAuth = useCallback(async () => {\n    if (!refreshToken) return false;\n    try {\n      const response = await axios.post(`${API_URL}/api/auth/refresh-token`, {\n        refreshToken\n      });\n      if (response.status === 200) {\n        const {\n          accessToken\n        } = response.data;\n        localStorage.setItem(\"accessToken\", accessToken);\n        return true;\n      }\n      ;\n    } catch (error) {\n      var _error$response;\n      console.error(\"Error al refrescar token:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    }\n    ;\n    logout();\n    return false;\n  }, [refreshToken]);\n  useEffect(() => {\n    const refreshLoop = setInterval(async () => {\n      const refreshToken = localStorage.getItem(\"refreshToken\");\n      if (!refreshToken) return;\n      try {\n        const response = await axios.post(`${API_URL}/api/auth/refresh-token`, {\n          refreshToken\n        });\n        if (response.status === 200 && response.data.accessToken && response.data.user) {\n          const newAccessToken = response.data.accessToken;\n          const refreshUser = response.data.user;\n          localStorage.setItem(\"accessToken\", newAccessToken);\n          localStorage.setItem(\"user\", JSON.stringify(refreshUser));\n          setAccessToken(newAccessToken);\n          setUser(refreshUser);\n        } else {\n          console.warn(\"Respuesta inesperada al refrescar token:\", response);\n          logout();\n        }\n        ;\n      } catch (error) {\n        var _error$response$data$, _error$response2, _error$response2$data;\n        const mensaje = (_error$response$data$ = (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) !== null && _error$response$data$ !== void 0 ? _error$response$data$ : error.message;\n        console.error(\"Error al refrescar token automáticamente:\", mensaje);\n        logout();\n      }\n      ;\n    }, 1000 * 60 * 59); // Cada 59 minutos porque el del backend dura 60 (lo probe cada 1 minuto y andaba bien).\n    return () => clearInterval(refreshLoop);\n  }, []);\n\n  // Efecto para cargar la autenticación al iniciar\n  useEffect(() => {\n    console.log(\"AuthProvider effect ejecutado\");\n    const loadAuthData = async () => {\n      try {\n        const storedAccessToken = localStorage.getItem('accessToken');\n        const storedRefreshToken = localStorage.getItem('refreshToken');\n        const storedUser = localStorage.getItem('user');\n        if (!storedAccessToken || !storedRefreshToken) {\n          logout();\n          return;\n        }\n        ;\n        if (storedUser) {\n          const response = await axios.get(`${API_URL}/api/auth/validate-token`, {\n            headers: {\n              Authorization: `Bearer ${storedAccessToken}`\n            }\n          });\n          //console.log(\"User recibido desde validate-token:\", response.data.user);\n          if (response.status === 200 && response.data.valid) {\n            setAccessToken(storedAccessToken);\n            setUser(response.data.user);\n            setIsAuthenticated(true);\n            localStorage.setItem('user', JSON.stringify(response.data.user)); // Para actualizar el local storage.\n          } else {\n            console.warn(\"Token inválido. Cerrando sesión.\");\n            logout();\n          }\n          ;\n        } else {\n          logout();\n        }\n        ;\n      } catch (error) {\n        var _error$response3;\n        const status = (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status;\n        if (status === 401) {\n          console.warn(\"Token expirado. Intentando refrescar...\");\n          const refreshed = await refreshAuth();\n          if (refreshed) {\n            // Reintenta validación con nuevo token\n            return loadAuthData();\n          }\n        }\n        ;\n        console.error(\"Error al validar token:\", error);\n        logout();\n      } finally {\n        setIsLoading(false);\n      }\n      ;\n    };\n    loadAuthData();\n  }, [refreshAuth]);\n\n  // Función para iniciar sesión\n  const login = (accessToken, refreshToken, userData) => {\n    if (!accessToken || !userData) {\n      console.error(\"Error: El backend envió un accessToken o userData vacío.\");\n      return;\n    }\n    ;\n    console.log(\"Datos enviados para guardar en el login: \", accessToken, refreshToken, userData);\n    console.log(\"Guardando accessToken en localStorage:\", accessToken);\n    console.log(\"Guardando userData en localStorage:\", JSON.stringify(userData));\n    localStorage.setItem('accessToken', accessToken);\n    localStorage.setItem('refreshToken', refreshToken);\n    localStorage.setItem('user', JSON.stringify(userData));\n    setAccessToken(accessToken);\n    setRefreshToken(refreshToken);\n    setUser(userData);\n    setIsAuthenticated(true);\n    console.log(\"`accessToken` guardado correctamente en localStorage.\");\n  };\n\n  // Función para cerrar sesión\n  const logout = () => {\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n    localStorage.removeItem('user');\n    setAccessToken(null);\n    setRefreshToken(null);\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n\n  // Función para actualizar datos del usuario\n  const updateUser = newData => {\n    if (!user) return;\n    const updatedUser = {\n      ...user,\n      ...newData\n    };\n    localStorage.setItem('user', JSON.stringify(updatedUser));\n    setUser(updatedUser);\n  };\n  const contextValue = {\n    isAuthenticated,\n    user,\n    accessToken,\n    refreshToken,\n    isLoading,\n    login,\n    logout,\n    refreshAuth,\n    setUser: updateUser\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: \"2rem\",\n        textAlign: \"center\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Cargando autenticaci\\xF3n...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 13\n    }, this);\n  }\n  console.log(\"AuthProvider montado\");\n  if (!children) {\n    console.warn(\"AuthProvider sin children\");\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 224,\n    columnNumber: 9\n  }, this);\n}\n_s(AuthProvider, \"GBd2PQ2nh/QkOB5+qttIay3BVfk=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","useContext","createContext","useState","useEffect","axios","useCallback","jsxDEV","_jsxDEV","API_URL","AuthContext","isAuthenticated","user","accessToken","refreshToken","isLoading","login","logout","refreshAuth","setUser","AuthProvider","children","_s","setIsAuthenticated","setAccessToken","setRefreshToken","setIsLoading","response","post","status","data","localStorage","setItem","error","_error$response","console","message","refreshLoop","setInterval","getItem","newAccessToken","refreshUser","JSON","stringify","warn","_error$response$data$","_error$response2","_error$response2$data","mensaje","clearInterval","log","loadAuthData","storedAccessToken","storedRefreshToken","storedUser","get","headers","Authorization","valid","_error$response3","refreshed","userData","removeItem","updateUser","newData","updatedUser","contextValue","style","padding","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","Provider","value","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/pferr/TrabajoPracticoPeluqueria/CRUDFrontend/client/src/auth/AuthProvider.tsx"],"sourcesContent":["import React, { useContext, createContext, useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useCallback } from \"react\";\r\nconst API_URL = 'http://localhost:3000';\r\n\r\n// Datos que se van a almaecenar mientras el usuario este autenticado, se almacenaran en el localStorage\r\ninterface UserData {\r\n    codigo: number;\r\n    email: string;\r\n    rol: 'cliente' | 'peluquero'|'admin';\r\n    nombre: string;\r\n    // Agregar otros campos según necesidad\r\n} \r\n\r\n// Contexto de autenticación\r\n// Este contexto se va a encargar de almacenar los datos del usuario y los tokens de acceso y refresco\r\ninterface AuthContextType {\r\n    isAuthenticated: boolean;\r\n    user: UserData | null;\r\n    accessToken: string | null;\r\n    refreshToken: string | null;\r\n    isLoading: boolean;\r\n    login: (accessToken: string, refreshToken: string, userData: UserData) => void;\r\n    logout: () => void;\r\n    refreshAuth: () => Promise<boolean>;\r\n    setUser: (user: Partial<UserData>) => void;\r\n}\r\n\r\n// Creamos el contexto de autenticación\r\n// Estos datos son solo iniciales, se van a sobreescribir cuando el usuario inicie sesión (en el Provider)\r\nconst AuthContext = createContext<AuthContextType>({\r\n    isAuthenticated: false,\r\n    user: null,\r\n    accessToken: null,\r\n    refreshToken: null,\r\n    isLoading: true,\r\n    login: () => {},\r\n    logout: () => {},\r\n    refreshAuth: async () => false,\r\n    setUser: () => {}\r\n});\r\n\r\ninterface AuthProviderProps {\r\n    children: React.ReactNode;\r\n}\r\n\r\n// Mantiene el estado de autenticación y proporciona funciones para iniciar/cerrar sesión y refrescar el token\r\nexport function AuthProvider({ children }: AuthProviderProps) {\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n    const [user, setUser] = useState<UserData | null>(null);\r\n    const [accessToken, setAccessToken] = useState<string | null>(null);\r\n    const [refreshToken, setRefreshToken] = useState<string | null>(null);\r\n    const [isLoading, setIsLoading] = useState<boolean>(true);\r\n\r\n    // Función para refrescar el token de acceso\r\n    const refreshAuth = useCallback(async (): Promise<boolean> => {\r\n        if (!refreshToken) return false;\r\n        try {\r\n            const response = await axios.post(`${API_URL}/api/auth/refresh-token`, {refreshToken});\r\n            \r\n            if(response.status === 200){\r\n                const { accessToken } = response.data;\r\n                localStorage.setItem(\"accessToken\", accessToken);\r\n                return true;\r\n            };\r\n        } catch (error: any) {\r\n            console.error(\"Error al refrescar token:\", error.response?.data || error.message);\r\n        };\r\n        logout();\r\n        return false;\r\n    }, [refreshToken]);\r\n\r\n    useEffect(() => {\r\n        const refreshLoop = setInterval(async () => {\r\n            const refreshToken = localStorage.getItem(\"refreshToken\");\r\n            if(!refreshToken) return;\r\n\r\n            try{\r\n                const response = await axios.post(`${API_URL}/api/auth/refresh-token`, {refreshToken})\r\n                if(response.status === 200 && response.data.accessToken && response.data.user){\r\n                    const newAccessToken = response.data.accessToken;\r\n                    const refreshUser = response.data.user\r\n                    localStorage.setItem(\"accessToken\", newAccessToken);\r\n                    localStorage.setItem(\"user\", JSON.stringify(refreshUser));\r\n                    setAccessToken(newAccessToken);\r\n                    setUser(refreshUser);\r\n                } else {\r\n                    console.warn(\"Respuesta inesperada al refrescar token:\", response);\r\n                    logout();\r\n                };\r\n            }catch(error:any){\r\n                const mensaje = error.response?.data?.message ?? error.message;\r\n                console.error(\"Error al refrescar token automáticamente:\", mensaje);\r\n                logout();\r\n            };\r\n        }, 1000 * 60 * 59); // Cada 59 minutos porque el del backend dura 60 (lo probe cada 1 minuto y andaba bien).\r\n        return () => clearInterval(refreshLoop);\r\n    }, []);\r\n\r\n    // Efecto para cargar la autenticación al iniciar\r\n    useEffect(() => {\r\n        console.log(\"AuthProvider effect ejecutado\");\r\n        const loadAuthData = async () => {\r\n        try {\r\n            const storedAccessToken = localStorage.getItem('accessToken');\r\n            const storedRefreshToken = localStorage.getItem('refreshToken');\r\n            const storedUser = localStorage.getItem('user');\r\n            if (!storedAccessToken || !storedRefreshToken) {\r\n                logout();\r\n                return;\r\n            };\r\n\r\n            if (storedUser) {\r\n                const response = await axios.get(`${API_URL}/api/auth/validate-token`, {\r\n                    headers: {\r\n                        Authorization: `Bearer ${storedAccessToken}`\r\n                    }\r\n                });\r\n                //console.log(\"User recibido desde validate-token:\", response.data.user);\r\n                if (response.status === 200 && response.data.valid) {\r\n                    setAccessToken(storedAccessToken);\r\n                    setUser(response.data.user);\r\n                    setIsAuthenticated(true);\r\n                    localStorage.setItem('user', JSON.stringify(response.data.user)); // Para actualizar el local storage.\r\n                } else {\r\n                    console.warn(\"Token inválido. Cerrando sesión.\");\r\n                    logout();\r\n                }; \r\n            }else {\r\n                logout();\r\n            };\r\n        }catch (error:any) {\r\n            const status = error.response?.status;\r\n\r\n            if (status === 401) {\r\n                console.warn(\"Token expirado. Intentando refrescar...\");\r\n\r\n                const refreshed = await refreshAuth();\r\n                if (refreshed) {\r\n                    // Reintenta validación con nuevo token\r\n                    return loadAuthData();\r\n                }\r\n            };\r\n\r\n            console.error(\"Error al validar token:\", error);\r\n            logout();\r\n        } finally {\r\n            setIsLoading(false);\r\n        };\r\n    };\r\n\r\n    loadAuthData();\r\n    }, [refreshAuth]);\r\n\r\n  // Función para iniciar sesión\r\n    const login = (accessToken:string, refreshToken:string, userData: UserData ) => {\r\n        \r\n        if (!accessToken || !userData) {\r\n            console.error(\"Error: El backend envió un accessToken o userData vacío.\");\r\n            return;\r\n        };\r\n        console.log(\"Datos enviados para guardar en el login: \", accessToken, refreshToken, userData);\r\n        console.log(\"Guardando accessToken en localStorage:\", accessToken);\r\n        console.log(\"Guardando userData en localStorage:\", JSON.stringify(userData));\r\n        localStorage.setItem('accessToken', accessToken);\r\n        localStorage.setItem('refreshToken', refreshToken);\r\n        localStorage.setItem('user', JSON.stringify(userData));\r\n        \r\n        setAccessToken(accessToken);\r\n        setRefreshToken(refreshToken);\r\n        setUser(userData);\r\n        setIsAuthenticated(true);\r\n\r\n        console.log(\"`accessToken` guardado correctamente en localStorage.\");\r\n    };\r\n\r\n    // Función para cerrar sesión\r\n    const logout = () => {\r\n        localStorage.removeItem('accessToken');\r\n        localStorage.removeItem('refreshToken');\r\n        localStorage.removeItem('user');\r\n        \r\n        setAccessToken(null);\r\n        setRefreshToken(null);\r\n        setUser(null);\r\n        setIsAuthenticated(false);\r\n        \r\n    };\r\n\r\n    // Función para actualizar datos del usuario\r\n    const updateUser = (newData: Partial<UserData>) => {\r\n        if (!user) return;\r\n        \r\n        const updatedUser = { ...user, ...newData };\r\n        localStorage.setItem('user', JSON.stringify(updatedUser));\r\n        setUser(updatedUser);\r\n    };\r\n\r\n    const contextValue: AuthContextType = {\r\n        isAuthenticated,\r\n        user,\r\n        accessToken,\r\n        refreshToken,\r\n        isLoading,\r\n        login,\r\n        logout,\r\n        refreshAuth,\r\n        setUser: updateUser\r\n    };\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <div style={{ padding: \"2rem\", textAlign: \"center\" }}>\r\n                <p>Cargando autenticación...</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    console.log(\"AuthProvider montado\");\r\n    if (!children) {\r\n    console.warn(\"AuthProvider sin children\");\r\n    }\r\n    return (\r\n        <AuthContext.Provider value={contextValue}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n}\r\n\r\nexport const useAuth = () => useContext(AuthContext);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}