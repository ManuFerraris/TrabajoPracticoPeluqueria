{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pferr\\\\TrabajoPracticoPeluqueria\\\\CRUDFrontend\\\\client\\\\src\\\\auth\\\\AuthProvider.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useContext, createContext, useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = 'http://localhost:3000';\n\n// Datos que se van a almaecenar mientras el usuario este autenticado, se almacenaran en el localStorage\n\n// Contexto de autenticación\n// Este contexto se va a encargar de almacenar los datos del usuario y los tokens de acceso y refresco\n\n// Creamos el contexto de autenticación\n// Estos datos son solo iniciales, se van a sobreescribir cuando el usuario inicie sesión (en el Provider)\nconst AuthContext = /*#__PURE__*/createContext({\n  isAuthenticated: false,\n  user: null,\n  accessToken: null,\n  refreshToken: null,\n  login: () => {},\n  logout: () => {},\n  refreshAuth: async () => false,\n  setUser: () => {}\n});\n// Mantiene el estado de autenticación y proporciona funciones para iniciar/cerrar sesión y refrescar el token\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n  const [accessToken, setAccessToken] = useState(null);\n  const [refreshToken, setRefreshToken] = useState(null);\n\n  // Efecto para cargar la autenticación al iniciar\n  useEffect(() => {\n    const loadAuthData = () => {\n      try {\n        const storedAccessToken = localStorage.getItem('accessToken');\n        const storedRefreshToken = localStorage.getItem('refreshToken');\n        const storedUser = localStorage.getItem('user');\n        if (storedAccessToken && storedRefreshToken && storedUser) {\n          setAccessToken(storedAccessToken);\n          setRefreshToken(storedRefreshToken);\n          setUser(JSON.parse(storedUser));\n          setIsAuthenticated(true);\n        }\n      } catch (error) {\n        console.error(\"Error al cargar datos de autenticación:\", error);\n        logout();\n      }\n    };\n    loadAuthData();\n  }, []);\n\n  // Función para iniciar sesión\n  const login = (accessToken, refreshToken, userData) => {\n    localStorage.setItem('accessToken', accessToken);\n    localStorage.setItem('refreshToken', refreshToken);\n    localStorage.setItem('user', JSON.stringify(userData));\n    setAccessToken(accessToken);\n    setRefreshToken(refreshToken);\n    setUser(userData);\n    setIsAuthenticated(true);\n\n    // Redirige luego de actualizar el estado\n    /*if (navigate) {\r\n        const destino = userData.rol === 'cliente' ? '/homeCliente' : '/homePeluquero';\r\n        navigate(destino);\r\n    };*/\n  };\n\n  // Función para cerrar sesión\n  const logout = () => {\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n    localStorage.removeItem('user');\n    setAccessToken(null);\n    setRefreshToken(null);\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n\n  // Función para actualizar datos del usuario\n  const updateUser = newData => {\n    if (!user) return;\n    const updatedUser = {\n      ...user,\n      ...newData\n    };\n    localStorage.setItem('user', JSON.stringify(updatedUser));\n    setUser(updatedUser);\n  };\n\n  // Función para refrescar el token de acceso\n  const refreshAuth = async () => {\n    if (!refreshToken) return false;\n    try {\n      const response = await fetch(`${API_URL}/auth/refresh-token`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${refreshToken}`\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        localStorage.setItem('accessToken', data.accessToken);\n        setAccessToken(data.accessToken);\n        return true;\n      }\n    } catch (error) {\n      console.error(\"Error al refrescar token:\", error);\n    }\n    logout();\n    return false;\n  };\n  const contextValue = {\n    isAuthenticated,\n    user,\n    accessToken,\n    refreshToken,\n    login,\n    logout,\n    refreshAuth,\n    setUser: updateUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 9\n  }, this);\n}\n_s(AuthProvider, \"3CZAlt8p3h6KG7tGM/0ouDWGMpk=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","useContext","createContext","useState","useEffect","jsxDEV","_jsxDEV","API_URL","AuthContext","isAuthenticated","user","accessToken","refreshToken","login","logout","refreshAuth","setUser","AuthProvider","children","_s","setIsAuthenticated","setAccessToken","setRefreshToken","loadAuthData","storedAccessToken","localStorage","getItem","storedRefreshToken","storedUser","JSON","parse","error","console","userData","setItem","stringify","removeItem","updateUser","newData","updatedUser","response","fetch","method","headers","ok","data","json","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/pferr/TrabajoPracticoPeluqueria/CRUDFrontend/client/src/auth/AuthProvider.tsx"],"sourcesContent":["import React, { useContext, createContext, useState, useEffect } from \"react\";\r\n\r\nconst API_URL = 'http://localhost:3000';\r\n\r\n// Datos que se van a almaecenar mientras el usuario este autenticado, se almacenaran en el localStorage\r\ninterface UserData {\r\n    codigo: number;\r\n    email: string;\r\n    rol: 'cliente' | 'peluquero';\r\n    nombre: string;\r\n    // Agregar otros campos según necesidad\r\n}\r\n\r\n// Contexto de autenticación\r\n// Este contexto se va a encargar de almacenar los datos del usuario y los tokens de acceso y refresco\r\ninterface AuthContextType {\r\n    isAuthenticated: boolean;\r\n    user: UserData | null;\r\n    accessToken: string | null;\r\n    refreshToken: string | null;\r\n    login: (accessToken: string, refreshToken: string, userData: UserData) => void;\r\n    logout: () => void;\r\n    refreshAuth: () => Promise<boolean>;\r\n    setUser: (user: Partial<UserData>) => void;\r\n}\r\n\r\n// Creamos el contexto de autenticación\r\n// Estos datos son solo iniciales, se van a sobreescribir cuando el usuario inicie sesión (en el Provider)\r\nconst AuthContext = createContext<AuthContextType>({\r\n    isAuthenticated: false,\r\n    user: null,\r\n    accessToken: null,\r\n    refreshToken: null,\r\n    login: () => {},\r\n    logout: () => {},\r\n    refreshAuth: async () => false,\r\n    setUser: () => {}\r\n});\r\n\r\ninterface AuthProviderProps {\r\n    children: React.ReactNode;\r\n}\r\n\r\n// Mantiene el estado de autenticación y proporciona funciones para iniciar/cerrar sesión y refrescar el token\r\nexport function AuthProvider({ children }: AuthProviderProps) {\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n    const [user, setUser] = useState<UserData | null>(null);\r\n    const [accessToken, setAccessToken] = useState<string | null>(null);\r\n    const [refreshToken, setRefreshToken] = useState<string | null>(null);\r\n\r\n    // Efecto para cargar la autenticación al iniciar\r\n    useEffect(() => {\r\n        const loadAuthData = () => {\r\n        try {\r\n            const storedAccessToken = localStorage.getItem('accessToken');\r\n            const storedRefreshToken = localStorage.getItem('refreshToken');\r\n            const storedUser = localStorage.getItem('user');\r\n\r\n            if (storedAccessToken && storedRefreshToken && storedUser) {\r\n            setAccessToken(storedAccessToken);\r\n            setRefreshToken(storedRefreshToken);\r\n            setUser(JSON.parse(storedUser));\r\n            setIsAuthenticated(true);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error al cargar datos de autenticación:\", error);\r\n            logout();\r\n        }\r\n    };\r\n\r\n    loadAuthData();\r\n    }, []);\r\n\r\n  // Función para iniciar sesión\r\n    const login = (\r\n        accessToken: string, \r\n        refreshToken: string, \r\n        userData: UserData,\r\n    ) => {\r\n        localStorage.setItem('accessToken', accessToken);\r\n        localStorage.setItem('refreshToken', refreshToken);\r\n        localStorage.setItem('user', JSON.stringify(userData));\r\n        \r\n        setAccessToken(accessToken);\r\n        setRefreshToken(refreshToken);\r\n        setUser(userData);\r\n        setIsAuthenticated(true);\r\n\r\n        // Redirige luego de actualizar el estado\r\n        /*if (navigate) {\r\n            const destino = userData.rol === 'cliente' ? '/homeCliente' : '/homePeluquero';\r\n            navigate(destino);\r\n        };*/\r\n    };\r\n\r\n    // Función para cerrar sesión\r\n    const logout = () => {\r\n        localStorage.removeItem('accessToken');\r\n        localStorage.removeItem('refreshToken');\r\n        localStorage.removeItem('user');\r\n        \r\n        setAccessToken(null);\r\n        setRefreshToken(null);\r\n        setUser(null);\r\n        setIsAuthenticated(false);\r\n        \r\n    };\r\n\r\n    // Función para actualizar datos del usuario\r\n    const updateUser = (newData: Partial<UserData>) => {\r\n        if (!user) return;\r\n        \r\n        const updatedUser = { ...user, ...newData };\r\n        localStorage.setItem('user', JSON.stringify(updatedUser));\r\n        setUser(updatedUser);\r\n    };\r\n\r\n    // Función para refrescar el token de acceso\r\n    const refreshAuth = async (): Promise<boolean> => {\r\n        if (!refreshToken) return false;\r\n\r\n        try {\r\n        const response = await fetch(`${API_URL}/auth/refresh-token`, {\r\n            method: 'POST',\r\n            headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${refreshToken}`\r\n            }\r\n        });\r\n\r\n        if (response.ok) {\r\n            const data = await response.json();\r\n            localStorage.setItem('accessToken', data.accessToken);\r\n            setAccessToken(data.accessToken);\r\n            return true;\r\n        }\r\n        } catch (error) {\r\n        console.error(\"Error al refrescar token:\", error);\r\n        }\r\n\r\n        logout();\r\n        return false;\r\n    };\r\n\r\n    const contextValue: AuthContextType = {\r\n        isAuthenticated,\r\n        user,\r\n        accessToken,\r\n        refreshToken,\r\n        login,\r\n        logout,\r\n        refreshAuth,\r\n        setUser: updateUser\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={contextValue}>\r\n        {children}\r\n        </AuthContext.Provider>\r\n    );\r\n}\r\n\r\nexport const useAuth = () => useContext(AuthContext);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}